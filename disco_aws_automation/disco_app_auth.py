"""
Generate App auth password and upload to S3 code
"""
from __future__ import print_function
import os
import re
# Pylint thinks string is a deprecated module
# pylint: disable=W0402
import string
import random

from hashlib import sha512
from base64 import standard_b64encode

from . import DiscoS3Bucket
from .disco_config import normalize_path
from .resource_helper import check_written_s3
from .exceptions import MissingAppAuthError, AppAuthKeyNotFoundError

PASSWORD_SIZE = 60


class DiscoAppAuth(object):
    """
    Check the content of the file in app_auth/<env>,
    and generate random password if needed.

    If the file contains ALWAYS_GENERATE the password is always regenerated when this is run.
    If the file contains GENERATE_WHEN_EMPTY the password is only generated when it does not yet exist.
    """
    def __init__(self, env, bucket_name, app_auth_dir=None):
        """ Define bucket in init so other functions can reuse it """
        self.bucket_name = bucket_name
        self.env = env
        self.bucket = DiscoS3Bucket(bucket_name)
        self.app_auth_dir = app_auth_dir

    def list_files(self):
        """ Return the list of application user file in the environment """
        file_paths = []  # List which will store all of the app auth user full filepaths.
        local_app_paths = []  # List which will store all app auth root path

        directory = self.app_auth_dir + "/app_auth/" + self.env \
            if self.app_auth_dir else normalize_path("app_auth/") + "/" + self.env

        for root, _directories, files in os.walk(directory):
            for filename in files:
                # Join the two strings in order to form the full filepath
                filepath = os.path.join(root, filename)
                file_paths.append(filepath)
                local_app_paths.append(root)

        if not local_app_paths:
            raise MissingAppAuthError("No application authorization data is found under {0} ."
                                      .format(directory))

        unique_local_app_paths = set(local_app_paths)  # Make the app auth root path unique
        return file_paths, unique_local_app_paths

    @staticmethod
    def get_content(filename):
        """ Get file content """
        with open(filename, "r") as myfile:
            data = myfile.read().replace('\n', '')
        return data

    @staticmethod
    def generate_random_password():
        """ Generate randome 60 alphanumeric characters long password """
        chars = string.letters + string.digits
        return ''.join((random.choice(chars)) for x in range(PASSWORD_SIZE))

    def generate_hash_password(self, passwd_key_names):
        """
        Generate hash password for app users password
        """
        password_hash = '# Generated by disco_app_auth.py automatically'
        for passwd_key_name in passwd_key_names:
            passwd_key_value = self.bucket.bucket.get_key(passwd_key_name).get_contents_as_string()
            username = passwd_key_name.split('/')[-1]
            password_hash += "\n" + username + ":" + \
                standard_b64encode(sha512(passwd_key_value).digest())
        return password_hash

    def _extract_key_name(self, path):
        """ Remove env and normalize path from the string """
        key_found = re.search(r'(app_auth/[\w\/\-]+)$', path)
        if key_found:
            key1_name = key_found.groups(-1)[0]
            return key1_name.replace('/' + self.env, '')
        else:
            raise AppAuthKeyNotFoundError("No Application Authorization Key is found under {0}".
                                          format(path))

    def upload_app_passwd_key(self, unique_local_app_paths, key_name_list):
        """
        Generate app auth passwd file contains all app auth user and their hashing passwd
        And upload to S3 bucket
        """
        for unique_local_app_path in unique_local_app_paths:
            key_name = self._extract_key_name(unique_local_app_path)
            # Create passwd key name for the app
            passwd_key_name = key_name + "/passwd"
            # Put all the app user keys in the list to generate hash password for the passwd file
            # And make sure we are not upload the local app passwd file if it happens to exist
            passwd_key_names = [s for s in key_name_list
                                if key_name in str(s) and not str(s).endswith("passwd")]
            passwd_key_value = self.generate_hash_password(passwd_key_names)
            print(("Uploading passwd key " + passwd_key_name))
            key = self.bucket.bucket.new_key(passwd_key_name)
            bytes_written = key.set_contents_from_string(passwd_key_value, encrypt_key=True)
            check_written_s3(passwd_key_name, len(passwd_key_value), bytes_written)

    def update(self, force=False):
        """ Update environment application authentication """
        key_name_list = []
        (filenames, unique_local_app_paths) = self.list_files()
        print(("Updating " + self.env + " Env " + self.bucket_name + " Bucket"))

        for filename in filenames:
            key = None
            key_name = self._extract_key_name(filename)
            file_contents = self.get_content(filename)
            key_name_list.append(key_name)

            if file_contents == 'GENERATE_WHEN_EMPTY' and not force:
                key = self.bucket.bucket.get_key(key_name)
                key_value = key.get_contents_as_string() if key else self.generate_random_password()
            else:
                key_value = self.generate_random_password() if (
                    file_contents in ['ALWAYS_GENERATE', 'GENERATE_WHEN_EMPTY']) else file_contents

            key = key if key else self.bucket.bucket.new_key(key_name)
            bytes_written = key.set_contents_from_string(key_value, encrypt_key=True)
            check_written_s3(key_name, len(key_value), bytes_written)

        # Upload passwd key for all the app
        self.upload_app_passwd_key(unique_local_app_paths, key_name_list)
